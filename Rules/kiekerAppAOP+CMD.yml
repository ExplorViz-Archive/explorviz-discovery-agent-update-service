
---
name: kiekerAppAOP+CMD
description: Changes the aop.xml and proposes a execution command of a the sampleApplication.
priority: 1
condition: "updateExec.getOsExecutionCommand()!= null && updateExec.getOsExecutionCommand().toLowerCase().contains(\"sample\");"
actions:
  - "updateExec.updateAop(\"<!DOCTYPE aspectj PUBLIC \\\"-//AspectJ//DTD//EN\\\" \\\"http://www.eclipse.org/aspectj/dtd/aspectj.dtd\\\">\\n\\n<aspectj>\\n  <weaver options=\\\"-verbose\\\"> <!-- options=\\\"-verbose -showWeaveInfo -Xjoinpoints:synchronization\\\" -->\\n\\n    <!-- Use the exclude/include directives to specify which classes are \\n      (not) to be considered for weaving. Some examples are given below. Please \\n      refer to the AspectJ documentation to learn more on the allowed patterns, \\n      including wildcards. -->\\n\\n\\n    <!-- Use * to consider all classes in all packages. In this case, you \\n      typically need some additional excludes. -->\\n\\n\\n    <include within=\\\"net.explorviz.sampleApplication..*\\\" />\\n\\n\\n    <!-- Include/exclude examples for specific libraries: -->\\n\\n    <!-- Important: The logger library that is configured to be used by Kieker \\n      must always be excluded! (Particularly important when using the include-all \\n      directive from above.) -->\\n\\n    <exclude within=\\\"org.apache.commons.logging..*\\\" />\\n    <exclude within=\\\"org.slf4j..*\\\" />\\n    <exclude within=\\\"java.util.logging..*\\\" />\\n    <exclude within=\\\"org.apache.log4j..*\\\" />\\n\\n    <!-- Instrument all kieker.tests: -->\\n    <!-- <include within=\\\"kieker.tests..*\\\" /> -->\\n\\n    <!-- Example instrumentation for the iBATIS JPetStore -->\\n    <!-- <include within=\\\"com.ibatis.jpetstore..*\\\"/> -->\\n    <!-- <include within=\\\"org.apache.struts.action.ActionServlet\\\" /> -->\\n\\n    <!-- Include this to enable javac compilation (instead of ajc) of the \\n      probes: -->\\n    <!-- <include within=\\\"kieker.monitoring.probe.aspectj..*\\\"/> -->\\n  </weaver>\\n\\n  <aspects>\\n    <!-- Method executions and method calls: -->\\n    <!-- <aspect name=\\\"kieker.monitoring.probe.aspectj.flow.operationExecution.FullInstrumentation\\\" \\n      /> -->\\n\\n    <aspect\\n      name=\\\"kieker.monitoring.probe.aspectj.flow.operationExecution.FullInstrumentationNoGetterAndSetter\\\" />\\n\\n    <aspect\\n      name=\\\"kieker.monitoring.probe.aspectj.database.Fullinstrumentation\\\" />\\n    <!-- Definition of additional targeted aspects (example for a single \\n      additional getter). Use these directives to create additional aspects without \\n      the need to actually implement them. -->\\n\\n    <!-- Verifying specific pointcuts -->\\n\\n    <!-- <concrete-aspect name=\\\"kieker.monitoring.probe.aspectj.database.TargetedAspect\\\" \\n      extends=\\\"kieker.monitoring.probe.aspectj.beforeafter.onlycallee.AbstractAspect\\\"> \\n      <pointcut name=\\\"monitoredOperation\\\" expression=\\\"call(* *(..)) &amp;&amp; \\n      noGetterAndSetter()\\\" /> </concrete-aspect> -->\\n  </aspects>\\n\\n</aspectj>\\n\");"
  - "updateExec.setName(\"KiekerSampleApp\");"
  - "String osExecCmd = updateExec.getOsExecutionCommand();"
  - "String workingDir = updateExec.getWorkingDirectory();"
  - "String[] splittetAtJarFlag = osExecCmd.split(\"-jar\", 2);"
  - "String proposedExecCMD = splittetAtJarFlag[0] + \"-jar \" + workingDir.trim() + \"/\" + splittetAtJarFlag[1].replace(\".\\\\\",\"\").trim();"
  - "updateExec.setProposedExecutionCommand(proposedExecCMD);"